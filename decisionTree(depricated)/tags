!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Python	nameref	/the original name for the tag/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Python	I,namespace	/name referring a module defined in other file/
!_TAG_KIND_DESCRIPTION!Python	Y,unknown	/name referring a class\/variable\/function\/module defined in other module/
!_TAG_KIND_DESCRIPTION!Python	c,class	/classes/
!_TAG_KIND_DESCRIPTION!Python	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Python	i,module	/modules/
!_TAG_KIND_DESCRIPTION!Python	m,member	/class members/
!_TAG_KIND_DESCRIPTION!Python	v,variable	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Python	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/adrian/codingProjects/privateGit/machineLearningPractice/decisionTree/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	//
!_TAG_ROLE_DESCRIPTION!Python!module	imported	/imported modules/
!_TAG_ROLE_DESCRIPTION!Python!module	indirectlyImported	/module imported in alternative name/
!_TAG_ROLE_DESCRIPTION!Python!module	namespace	/namespace from where classes\/variables\/functions are imported/
!_TAG_ROLE_DESCRIPTION!Python!unknown	imported	/imported from the other module/
!_TAG_ROLE_DESCRIPTION!Python!unknown	indirectlyImported	/classes\/variables\/functions\/modules imported in alternative name/
DecisionTree	debugging.py	/^class DecisionTree:$/;"	c
Node	debugging.py	/^class Node:$/;"	c
__init__	debugging.py	/^    def __init__(self, feature=None, threshold=None, left=None, right=None, *, value=None):$/;"	m	class:Node
__init__	debugging.py	/^    def __init__(self, max_depth=100, min_samples_split=2):$/;"	m	class:DecisionTree
_best_split	debugging.py	/^    def _best_split(self, X, y, features):$/;"	m	class:DecisionTree
_build_tree	debugging.py	/^    def _build_tree(self, X, y, depth=0):$/;"	m	class:DecisionTree
_create_split	debugging.py	/^    def _create_split(self, X, thresh):$/;"	m	class:DecisionTree
_entropy	debugging.py	/^    def _entropy(self, y):$/;"	m	class:DecisionTree
_information_gain	debugging.py	/^    def _information_gain(self, X, y, thresh):$/;"	m	class:DecisionTree
_is_finished	debugging.py	/^    def _is_finished(self, depth):$/;"	m	class:DecisionTree
_traverse_tree	debugging.py	/^    def _traverse_tree(self, X, node):$/;"	m	class:DecisionTree
accuracy	debugging.py	/^def accuracy(y_true, y_pred):$/;"	f
df	debugging.py	/^df = pd.read_csv("\/home\/adrian\/codingProjects\/privateGit\/machineLearningPractice\/decisionT/;"	v
dt	debugging.py	/^dt = DecisionTree(max_depth=10)$/;"	v
fit	debugging.py	/^    def fit(self, X, y):$/;"	m	class:DecisionTree
is_leaf	debugging.py	/^    def is_leaf(self):$/;"	m	class:Node
le	debugging.py	/^le = preprocessing.LabelEncoder()$/;"	v
np	debugging.py	/^import numpy as np$/;"	I	nameref:module:numpy
oneHotEncodingMuiltiple	debugging.py	/^def oneHotEncodingMuiltiple(dataFrame, columnsList):$/;"	f
ordinalEncodingMuiltiple	debugging.py	/^def ordinalEncodingMuiltiple(dataFrame, columnList):$/;"	f
pd	debugging.py	/^import pandas as pd$/;"	I	nameref:module:pandas
predict	debugging.py	/^    def predict(self, X):$/;"	m	class:DecisionTree
sea	debugging.py	/^import seaborn as sea$/;"	I	nameref:module:seaborn
x	debugging.py	/^x = df.copy()$/;"	v
x_test	debugging.py	/^x_test = oneHotEncodingMuiltiple(x_test, ['Sex'])$/;"	v
x_test	debugging.py	/^x_test = ordinalEncodingMuiltiple(x_test, ['BP', 'Cholesterol'])$/;"	v
x_test	debugging.py	/^x_test = x_test.drop(['Drug'], axis = 1)$/;"	v
x_test	debugging.py	/^x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33)$/;"	v
x_train	debugging.py	/^x_train = oneHotEncodingMuiltiple(x_train, ['Sex'])$/;"	v
x_train	debugging.py	/^x_train = ordinalEncodingMuiltiple(x_train, ['BP', 'Cholesterol'])$/;"	v
x_train	debugging.py	/^x_train = x_train.drop(['Drug'], axis = 1)$/;"	v
x_train	debugging.py	/^x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33)$/;"	v
y	debugging.py	/^y = df['Drug']$/;"	v
y_test	debugging.py	/^x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33)$/;"	v
y_test	debugging.py	/^y_test = le.transform(y_test)$/;"	v
y_train	debugging.py	/^x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.33)$/;"	v
y_train	debugging.py	/^y_train = le.transform(y_train)$/;"	v
